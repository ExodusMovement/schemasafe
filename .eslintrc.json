{
  "parserOptions": {
    "sourceType": "script"
  },
  "env": {
    "browser": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "standard",
    "prettier",
    "prettier/standard"
  ],
  "rules": {
    "no-restricted-syntax": [
      2,
      {
        "selector": "MemberExpression[property.name='toString']",
        "message": "Use template literals instead of .toString()"
      },
      {
        "selector": "CallExpression:matches([callee.name='format'], [callee.property.name='write'], [callee.property.name='block']):not(:matches([arguments.0.type='Literal'], [arguments.0.type='Identifier']:matches([arguments.0.name='fmt'], [arguments.0.name='close'])))",
        "message": "Only literals or 'fmt' / 'close' identifiers are allowed as first format(), .write() and .block() argument (fmt)"
      },
      {
        "selector": "CallExpression[callee.name='errorIf']:not([arguments.0.type='Literal'])",
        "message": "Only literals are allowed as first errorIf() argument (fmt)"
      },
      {
        "selector": "CallExpression[callee.name='maybeWrap']:not([arguments.1.type='Literal'][arguments.3.type='Literal'])",
        "message": "Only literals are allowed as second and fourth maybeWrap() argument (fmt, close)"
      },
      {
        "selector": "CallExpression[callee.property.name='block']:not(:matches([arguments.2.type='Literal'], [arguments.2.name='close']))",
        "message": "Only literals or 'close' are allowed as third .block() argument (close)"
      },
      {
        "selector": ":not(:matches([id.name='format'], [key.name='write'], [key.name='block'], [id.name='errorIf'], [id.name='maybeWrap'])) > [params] > Identifier:matches([name='fmt'], [name='close'])",
        "message": "Identifiers 'fmt' / 'close' can be only defined as format(), .write(), .block(), errorIf() and maybeWrap() arguments"
      },
      {
        "selector": "VariableDeclarator > .id:matches([name='fmt'], [name='close'])",
        "message": "Identifiers 'fmt' / 'close' can be only defined as function arguments"
      },
      {
        "selector": "VariableDeclarator > .id :matches([name='fmt'], [name='close'])",
        "message": "Identifiers 'fmt' / 'close' can be only defined as function arguments"
      }
    ],
    "strict": 2,
    "no-else-return": 2,
    "no-fallthrough": 2,
    "no-param-reassign": 2,
    "no-proto": 2,
    "no-prototype-builtins": 2,
    "no-shadow": 2,
    "prefer-const": 2,
    "prefer-object-spread": 2,
    "prefer-template": 2,
    "valid-typeof": [2, { "requireStringLiterals": true }],
    "no-var": 2
  }
}
